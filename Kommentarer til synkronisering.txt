I koden har vi brukt et producer/consumer forhold som baserer seg på aksessering av objekter i en kø. Dette har vi implementert i to steg ved at Doorman er producer og legger kunder i en kø, mens Barber er consumer og henter fra køen. Det kjøres fire tråder i programmer, en per Barber og en Doorman. Siden alle disse fire trådene er avhengig av tilgang til den samme køen bruker vi synchronized for å unngå at trådene forstryrrer hverandre eller skaper feil i køen. Alle funksjonene som skriver til eller henter informasjon fra køen blir gjort gjennom synkroniseringsmetodene i Java.

I synkroniseringsblokkene bruker vi wait-funksjonen dersom det foreksempel ikke er nok personer i kø til at en Barber kan ta neste kunde. Doorman trigger da waitfunksjonen i Barber med en notify. Denne sier ifra at det har blitt en endring. For å unngå at Doorman eller Barber opptak unødvendig mye tid i prosessering av køen har vi implementert wait og notify ved hjelp av mindre synkroniseringsblokker.